// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'database/objectbox_db/user_schema.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6711357432305510592),
      name: 'User',
      lastPropertyId: const IdUid(30, 2241692046563548154),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4172464881118807149),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1430364085050295372),
            name: 'user_id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2445907045795451445),
            name: 'user',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 682353429280406058),
            name: 'active',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3318360336948147347),
            name: 'user_porikkito_chk',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9134423902222611652),
            name: 'develop_mg',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 119612715617904207),
            name: 'operation_mg',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6005899883652803392),
            name: 'area_manage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8260257764590372688),
            name: 'md',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7543453720407785670),
            name: 'member',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2876234601899048393),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 6349454692383910262),
            name: 'last_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 407170219022643543),
            name: 'user_photo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 7260243635833060552),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 3851324077867976367),
            name: 'mobile',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 6700471312478747147),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 6796319615675211418),
            name: 'kromic2',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 6124310830186176212),
            name: 'plus_amount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 2742370352930274697),
            name: 'minus_amount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 303801175431788819),
            name: 'organization',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 7917994968566331975),
            name: 'designation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 1403563874763693855),
            name: 'br_code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 7923004321113844225),
            name: 'dol_code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 9152164614449077081),
            name: 'pack',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(25, 8549009295396329603),
            name: 'date',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(26, 8022401776974895137),
            name: 'time',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 591636829588324267),
            name: 'zxc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(28, 4001185398899378418),
            name: 'branch',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(29, 2339171841070674561),
            name: 'chk_2',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(30, 2241692046563548154),
            name: 'password',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 6711357432305510592),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    User: EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final user_idOffset = fbb.writeString(object.user_id);
          final userOffset = fbb.writeString(object.user);
          final user_porikkito_chkOffset =
              fbb.writeString(object.user_porikkito_chk);
          final develop_mgOffset = fbb.writeString(object.develop_mg);
          final operation_mgOffset = fbb.writeString(object.operation_mg);
          final area_manageOffset = fbb.writeString(object.area_manage);
          final mdOffset = fbb.writeString(object.md);
          final memberOffset = fbb.writeString(object.member);
          final nameOffset = fbb.writeString(object.name);
          final last_nameOffset = fbb.writeString(object.last_name);
          final user_photoOffset = fbb.writeString(object.user_photo);
          final emailOffset = fbb.writeString(object.email);
          final mobileOffset = fbb.writeString(object.mobile);
          final addressOffset = fbb.writeString(object.address);
          final organizationOffset = fbb.writeString(object.organization);
          final designationOffset = fbb.writeString(object.designation);
          final br_codeOffset = fbb.writeString(object.br_code);
          final dol_codeOffset = fbb.writeString(object.dol_code);
          final packOffset = fbb.writeString(object.pack);
          final dateOffset =
              object.date == null ? null : fbb.writeString(object.date!);
          final timeOffset = fbb.writeString(object.time);
          final zxcOffset = fbb.writeString(object.zxc);
          final branchOffset = fbb.writeString(object.branch);
          final chk_2Offset = fbb.writeString(object.chk_2);
          final passwordOffset = fbb.writeString(object.password);
          fbb.startTable(31);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, user_idOffset);
          fbb.addOffset(2, userOffset);
          fbb.addInt64(3, object.active);
          fbb.addOffset(4, user_porikkito_chkOffset);
          fbb.addOffset(5, develop_mgOffset);
          fbb.addOffset(6, operation_mgOffset);
          fbb.addOffset(7, area_manageOffset);
          fbb.addOffset(8, mdOffset);
          fbb.addOffset(9, memberOffset);
          fbb.addOffset(10, nameOffset);
          fbb.addOffset(11, last_nameOffset);
          fbb.addOffset(12, user_photoOffset);
          fbb.addOffset(13, emailOffset);
          fbb.addOffset(14, mobileOffset);
          fbb.addOffset(15, addressOffset);
          fbb.addInt64(16, object.kromic2);
          fbb.addInt64(17, object.plus_amount);
          fbb.addInt64(18, object.minus_amount);
          fbb.addOffset(19, organizationOffset);
          fbb.addOffset(20, designationOffset);
          fbb.addOffset(21, br_codeOffset);
          fbb.addOffset(22, dol_codeOffset);
          fbb.addOffset(23, packOffset);
          fbb.addOffset(24, dateOffset);
          fbb.addOffset(25, timeOffset);
          fbb.addOffset(26, zxcOffset);
          fbb.addOffset(27, branchOffset);
          fbb.addOffset(28, chk_2Offset);
          fbb.addOffset(29, passwordOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              user_id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              user: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              active:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              user_porikkito_chk: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              develop_mg: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              operation_mg: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              area_manage: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              md: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              member: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              name: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''),
              last_name: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 26, ''),
              user_photo: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 28, ''),
              email: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 30, ''),
              mobile: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 32, ''),
              address: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 34, ''),
              kromic2: const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0),
              plus_amount: const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0),
              minus_amount: const fb.Int64Reader().vTableGet(buffer, rootOffset, 40, 0),
              organization: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 42, ''),
              designation: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 44, ''),
              br_code: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 46, ''),
              dol_code: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 48, ''),
              pack: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 50, ''),
              date: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 52),
              time: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 54, ''),
              zxc: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 56, ''),
              branch: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 58, ''),
              chk_2: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 60, ''),
              password: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 62, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[0].properties[0]);

  /// see [User.user_id]
  static final user_id = QueryStringProperty<User>(_entities[0].properties[1]);

  /// see [User.user]
  static final user = QueryStringProperty<User>(_entities[0].properties[2]);

  /// see [User.active]
  static final active = QueryIntegerProperty<User>(_entities[0].properties[3]);

  /// see [User.user_porikkito_chk]
  static final user_porikkito_chk =
      QueryStringProperty<User>(_entities[0].properties[4]);

  /// see [User.develop_mg]
  static final develop_mg =
      QueryStringProperty<User>(_entities[0].properties[5]);

  /// see [User.operation_mg]
  static final operation_mg =
      QueryStringProperty<User>(_entities[0].properties[6]);

  /// see [User.area_manage]
  static final area_manage =
      QueryStringProperty<User>(_entities[0].properties[7]);

  /// see [User.md]
  static final md = QueryStringProperty<User>(_entities[0].properties[8]);

  /// see [User.member]
  static final member = QueryStringProperty<User>(_entities[0].properties[9]);

  /// see [User.name]
  static final name = QueryStringProperty<User>(_entities[0].properties[10]);

  /// see [User.last_name]
  static final last_name =
      QueryStringProperty<User>(_entities[0].properties[11]);

  /// see [User.user_photo]
  static final user_photo =
      QueryStringProperty<User>(_entities[0].properties[12]);

  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[0].properties[13]);

  /// see [User.mobile]
  static final mobile = QueryStringProperty<User>(_entities[0].properties[14]);

  /// see [User.address]
  static final address = QueryStringProperty<User>(_entities[0].properties[15]);

  /// see [User.kromic2]
  static final kromic2 =
      QueryIntegerProperty<User>(_entities[0].properties[16]);

  /// see [User.plus_amount]
  static final plus_amount =
      QueryIntegerProperty<User>(_entities[0].properties[17]);

  /// see [User.minus_amount]
  static final minus_amount =
      QueryIntegerProperty<User>(_entities[0].properties[18]);

  /// see [User.organization]
  static final organization =
      QueryStringProperty<User>(_entities[0].properties[19]);

  /// see [User.designation]
  static final designation =
      QueryStringProperty<User>(_entities[0].properties[20]);

  /// see [User.br_code]
  static final br_code = QueryStringProperty<User>(_entities[0].properties[21]);

  /// see [User.dol_code]
  static final dol_code =
      QueryStringProperty<User>(_entities[0].properties[22]);

  /// see [User.pack]
  static final pack = QueryStringProperty<User>(_entities[0].properties[23]);

  /// see [User.date]
  static final date = QueryStringProperty<User>(_entities[0].properties[24]);

  /// see [User.time]
  static final time = QueryStringProperty<User>(_entities[0].properties[25]);

  /// see [User.zxc]
  static final zxc = QueryStringProperty<User>(_entities[0].properties[26]);

  /// see [User.branch]
  static final branch = QueryStringProperty<User>(_entities[0].properties[27]);

  /// see [User.chk_2]
  static final chk_2 = QueryStringProperty<User>(_entities[0].properties[28]);

  /// see [User.password]
  static final password =
      QueryStringProperty<User>(_entities[0].properties[29]);
}
